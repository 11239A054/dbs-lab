{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMGqSm27Whx2fPa14SC8lIL",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/11239A054/dbs-lab/blob/main/11239A054Ex%20no-5e\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "N42cknA6srHR",
        "outputId": "a7dd7397-9ce5-4e43-ed48-20a295158e3f"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\n",
            "\t\tRAIL FENCE TECHNIQUE\n",
            "\n",
            "\n",
            "Enter the input string: SCSVMV\n",
            "\n",
            "Cipher text after applying rail fence:\n",
            "SSMCVV\n",
            "\n",
            "Text after decryption:\n",
            "SCSVMV\n",
            "Press Enter to continue...database security\n"
          ]
        }
      ],
      "source": [
        "import sys\n",
        "\n",
        "def main():\n",
        "    print(\"\\n\\t\\tRAIL FENCE TECHNIQUE\")\n",
        "    a = input(\"\\n\\nEnter the input string: \")\n",
        "    l = len(a)\n",
        "\n",
        "    # Ciphering\n",
        "    c = ''.join([a[i] for i in range(l) if i % 2 == 0])\n",
        "    c += ''.join([a[i] for i in range(l) if i % 2 == 1])\n",
        "\n",
        "    print(\"\\nCipher text after applying rail fence:\")\n",
        "    print(c)\n",
        "\n",
        "    # Deciphering\n",
        "    k = l // 2 if l % 2 == 0 else (l // 2) + 1\n",
        "    d = [''] * l\n",
        "\n",
        "    for i in range(k):\n",
        "        d[i * 2] = c[i]\n",
        "    for i in range(k, l):\n",
        "        d[(i - k) * 2 + 1] = c[i]\n",
        "\n",
        "    d = ''.join(d)\n",
        "\n",
        "    print(\"\\nText after decryption:\")\n",
        "    print(d)\n",
        "\n",
        "    input(\"Press Enter to continue...\")\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()\n",
        "\n"
      ]
    }
  ]
}