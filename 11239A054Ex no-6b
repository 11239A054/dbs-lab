{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMCS6mJd3wZWB29ZdkTBgqR",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/11239A054/dbs-lab/blob/main/11239A054Ex%20no-6b\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YuqO3NcGvdPd",
        "outputId": "9420891a-d22d-4d40-ffa7-b7be1a59ab3c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "ENTER FIRST PRIME NUMBER:\n",
            "3\n",
            "\n",
            "ENTER ANOTHER PRIME NUMBER:\n",
            "5\n",
            "\n",
            "ENTER MESSAGE (lowercase letters only):\n",
            "hi pranathi\n",
            "\n",
            "POSSIBLE VALUES OF e AND d ARE:\n",
            "e = 7\td = 7\n",
            "\n",
            "Using public key e = 7\n",
            "\n",
            "THE ENCRYPTED MESSAGE IS:\n",
            "bikalanaebi\n",
            "\n",
            "Using private key d = 7\n",
            "\n",
            "THE DECRYPTED MESSAGE IS:\n",
            "hikacanaehi\n"
          ]
        }
      ],
      "source": [
        "import math\n",
        "\n",
        "# Global variables\n",
        "p, q, n, t = 0, 0, 0, 0\n",
        "e, d, temp, m, en = [], [], [], [], []\n",
        "msg = \"\"\n",
        "\n",
        "def prime(pr):\n",
        "    \"\"\"Check if a number is prime\"\"\"\n",
        "    if pr < 2:\n",
        "        return 0\n",
        "    j = int(math.sqrt(pr))\n",
        "    for i in range(2, j + 1):\n",
        "        if pr % i == 0:\n",
        "            return 0\n",
        "    return 1\n",
        "\n",
        "\n",
        "def cd(x):\n",
        "    \"\"\"Compute modular multiplicative inverse\"\"\"\n",
        "    k = 1\n",
        "    while True:\n",
        "        k = k + t\n",
        "        if k % x == 0:\n",
        "            return k // x\n",
        "\n",
        "\n",
        "def ce():\n",
        "    \"\"\"Find encryption (e) and decryption (d) keys\"\"\"\n",
        "    global e, d, t, p, q\n",
        "    k = 0\n",
        "    for i in range(2, t):\n",
        "        if t % i == 0:\n",
        "            continue\n",
        "        flag = prime(i)\n",
        "        if flag == 1 and i != p and i != q:\n",
        "            e.append(i)\n",
        "            val = cd(e[k])\n",
        "            if val > 0:\n",
        "                d.append(val)\n",
        "                k += 1\n",
        "            if k == 99:\n",
        "                break\n",
        "\n",
        "\n",
        "def encrypt():\n",
        "    \"\"\"Encrypt the message\"\"\"\n",
        "    global msg, m, n, e, en, temp\n",
        "    key = e[0]\n",
        "    print(f\"\\nUsing public key e = {key}\")\n",
        "    for char in msg:\n",
        "        pt = ord(char) - 96  # convert letter to number\n",
        "        k = pow(pt, key, n)\n",
        "        temp.append(k)\n",
        "        ct = k + 96\n",
        "        en.append(ct)\n",
        "    en.append(-1)\n",
        "\n",
        "    print(\"\\nTHE ENCRYPTED MESSAGE IS:\")\n",
        "    print(''.join(chr(c) for c in en[:-1]))\n",
        "\n",
        "\n",
        "def decrypt():\n",
        "    \"\"\"Decrypt the message\"\"\"\n",
        "    global temp, n, d, m\n",
        "    key = d[0]\n",
        "    print(f\"\\nUsing private key d = {key}\")\n",
        "    i = 0\n",
        "    while i < len(temp):\n",
        "        ct = temp[i]\n",
        "        k = pow(ct, key, n)\n",
        "        pt = k + 96\n",
        "        m.append(pt)\n",
        "        i += 1\n",
        "    m.append(-1)\n",
        "\n",
        "    print(\"\\nTHE DECRYPTED MESSAGE IS:\")\n",
        "    print(''.join(chr(c) for c in m[:-1]))\n",
        "\n",
        "\n",
        "def main():\n",
        "    global p, q, n, t, msg, m, e, d, temp, en\n",
        "\n",
        "    print(\"\\nENTER FIRST PRIME NUMBER:\")\n",
        "    p = int(input())\n",
        "    if not prime(p):\n",
        "        print(\"\\nWRONG INPUT — Not a prime number.\")\n",
        "        return\n",
        "\n",
        "    print(\"\\nENTER ANOTHER PRIME NUMBER:\")\n",
        "    q = int(input())\n",
        "    if not prime(q) or p == q:\n",
        "        print(\"\\nWRONG INPUT — Must be a different prime number.\")\n",
        "        return\n",
        "\n",
        "    print(\"\\nENTER MESSAGE (lowercase letters only):\")\n",
        "    msg = input().strip()\n",
        "    if not msg.islower():\n",
        "        print(\"\\nPlease enter lowercase letters only (a–z).\")\n",
        "        return\n",
        "\n",
        "    # Reset lists\n",
        "    e, d, temp, m, en = [], [], [], [], []\n",
        "\n",
        "    # RSA setup\n",
        "    n = p * q\n",
        "    t = (p - 1) * (q - 1)\n",
        "\n",
        "    ce()\n",
        "\n",
        "    print(\"\\nPOSSIBLE VALUES OF e AND d ARE:\")\n",
        "    for i in range(len(e)):\n",
        "        print(f\"e = {e[i]}\\td = {d[i]}\")\n",
        "\n",
        "    encrypt()\n",
        "    decrypt()\n",
        "\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()\n"
      ]
    }
  ]
}